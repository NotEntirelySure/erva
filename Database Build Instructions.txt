#Enter the following command into the postgres SQL shell prompt:

CREATE DATABASE erva;
CREATE USER superuser WITH ENCRYPTED PASSWORD '[redacted]';

#Log into the newly-created erva database with the following command:

\c erva;

#Now that you are connected to the erva database, you need assign premissions to the newly created superuser account. Enter the following commands to assign the permissions:

GRANT ALL PRIVILEGES ON DATABASE erva TO superuser;
GRANT ALL ON SCHEMA public TO superuser;

Now that the superuser has been grated premission, connect to the erva database as the super user with the following command:

\c erva superuser;

now that you're connected to the erva as superuser, the tables need to be created. To do this, you can copy and paste all of the database schema in one go

CREATE EXTENSION pgcrypto;

CREATE TABLE roles (
	roles_id SERIAL PRIMARY KEY,
	roles_name VARCHAR
);

CREATE TABLE accounttypes (
	at_id SERIAL PRIMARY KEY,
	at_name VARCHAR
);

CREATE TABLE users (
	users_id SERIAL PRIMARY KEY,
	users_fk_role INT REFERENCES roles(roles_id),
	users_fk_type INT REFERENCES accounttypes(at_id),
	users_first_name VARCHAR,
	users_last_name VARCHAR,
	users_email TEXT NOT NULL UNIQUE,
	users_password TEXT NOT NULL,
	users_otp_key BYTEA NOT NULL,
	users_api_key TEXT,
	users_created_at TIMESTAMP,
	users_enabled BOOLEAN,
	users_verified BOOLEAN
);

CREATE TABLE offices (
	offices_id SERIAL PRIMARY KEY,
	offices_image BYTEA,
	offices_name VARCHAR,
	offices_address VARCHAR,
	offices_city VARCHAR,
	offices_state VARCHAR,
	offices_zip VARCHAR,
	offices_lat NUMERIC(18, 15),
	offices_long NUMERIC(18, 15)
);

CREATE TABLE facilities (
	facilities_id SERIAL PRIMARY KEY,
	facilities_fk_offices INT REFERENCES offices(offices_id),
	facilities_name VARCHAR,
	facilities_address VARCHAR,
	facilities_city VARCHAR,
	facilities_state VARCHAR,
	facilities_zip VARCHAR,
	facilities_lat NUMERIC(18, 15),
	facilities_long NUMERIC(18, 15),
	facilities_image TEXT,
	facilities_code TEXT
);

CREATE TABLE facilitypermissions (
	fp_id SERIAL PRIMARY KEY,
	fp_fk_user INT REFERENCES users(users_id),
	fp_fk_facility INT REFERENCES facilities(facilities_id)
);

CREATE TABLE blueprints (
	blueprint_id SERIAL PRIMARY KEY,
	blueprint_fk_facility_id INT REFERENCES facilities(facilities_id),
	blueprint_name VARCHAR,
	blueprint_image VARCHAR
);

CREATE TABLE component_categories (
	category_id SERIAL PRIMARY KEY,
	category_name VARCHAR
);

CREATE TABLE map_components (
	component_id SERIAL PRIMARY KEY,
  	component_category INT REFERENCES component_categories(category_id),
	component_type VARCHAR,
	component_name VARCHAR,
	component_icon VARCHAR,
	component_color VARCHAR
);

CREATE TABLE component_locations (
	location_id SERIAL PRIMARY KEY,
	location_component_id INT REFERENCES map_components(component_id),
	location_facility_id INT REFERENCES facilities(facilities_id),
	location_lat DECIMAL(18, 15),
	location_long DECIMAL(18, 15),
	location_floor INT
);

CREATE TABLE access_log (
	access_log_id SERIAL PRIMARY KEY,
	access_log_user_id INT,
	access_log_blueprint_id INT,
	access_log_timestamp TIMESTAMP
);

#Check that the tables were successfully created by using this command: 

\dt tables;

#You should see 8 rows listed

#Copy and paste all of the following lines as well

INSERT INTO accounttypes (at_name) values ('government');
INSERT INTO accounttypes (at_name) values ('enterprise');
INSERT INTO accounttypes (at_name) values ('administrator');
INSERT INTO accounttypes (at_name) values ('generic');
INSERT INTO roles (roles_name) values ('manager');
INSERT INTO roles (roles_name) values ('user');

#Check to see if this worked by using the command SELECT * from accounttypes;

#You should see 4 rows listed

CREATE OR REPLACE FUNCTION forgot_password (emailAddress VARCHAR)
RETURNS TABLE(id INT, email TEXT, password TEXT)
LANGUAGE plpgsql
AS $$
  BEGIN 
    IF EXISTS (SELECT 1 FROM users WHERE users_email=emailAddress) THEN
	RETURN QUERY SELECT users_id, users_email, users_password
	FROM users
	WHERE users_email=emailAddress;
    END IF;
    RETURN;
  END;
$$;

CREATE OR REPLACE FUNCTION get_map_components (userId INT, facilityId INT)
RETURNS TABLE(
  id INT,
  category VARCHAR,
  color VARCHAR,
  type VARCHAR,
  name VARCHAR,
  icon VARCHAR,
  lat NUMERIC,
  long NUMERIC,
  floor INT
)
LANGUAGE plpgsql
AS $$
  BEGIN 
    IF EXISTS (
      SELECT 1 
      FROM facilitypermissions
      WHERE fp_fk_user=userId
      AND fp_fk_facility=facilityId
    ) 
    THEN RETURN QUERY 
      SELECT
        cl.location_id,
        cc.category_name,
	mc.component_color,
        mc.component_type,
        mc.component_name,
        mc.component_icon,
        cl.location_lat,
        cl.location_long,
	cl.location_floor
      FROM component_locations AS cl
      INNER JOIN map_components AS mc ON cl.location_component_id=mc.component_id
			INNER JOIN component_categories AS cc ON mc.component_category=cc.category_id
      WHERE cl.location_facility_id=facilityId;
    END IF;
    RETURN;
  END;
$$;

CREATE INDEX idx_user_id_permissions ON facilitypermissions(fp_fk_user);
